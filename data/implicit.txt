#version 430 core


layout(local_size_x=1, local_size_y=1, local_size_z=1) in;

struct sphere_instance
{
	mat4 translation;
	mat4 translation_inv;
	vec3 color;
	float radius;
};


struct cylinder_instance
{
	mat4 translation;

	mat4 translation_inv;

	vec3 color;

	/* radius of each cylinder  */
	float radius; 

	/* height of cylinder */
	float height;
	
	/* Required padding */
	float dummy[3];
};


struct box_instance
{
	mat4 translation;
	
	mat4 translation_inv;
	
	vec3 color; 
	
	float padding1;

	/* box dimension */	
	vec3 dimension;

	float padding2;
};



#define OBJECT_NONE 0xFFFFFFFF

#define	OBJECT_OBJECT_UNION 	0
#define	OBJECT_NODE_UNION 	1
#define	NODE_NODE_UNION 	2

struct object_instance
{
	uint levels;
	uint index_type;
	uint index_left;
	uint index_right;
	
	mat4 translation;
	mat4 translation_inv;
};


struct object_node
{
	uint padding;
	uint index_type;
	uint index_left;
	uint index_right;
	
	mat4 translation;
	mat4 translation_inv;
};




layout(rgba32f, binding=0) uniform restrict image2D color;
layout(rgba32f, binding=1) uniform restrict image2D position;
layout(rgba32f, binding=2) uniform restrict image2D normal;
layout(r32f, binding=4) uniform restrict image2D buffer_t;

layout(binding=0, std430) readonly restrict buffer sphere_ssbo
{
	sphere_instance spheres[];
};


layout(binding=1, std430) readonly restrict buffer cylinder_ssbo
{
	cylinder_instance cylinders[];
};


layout(binding=2, std430) readonly restrict buffer box_ssbo
{
	box_instance boxes[];
};


layout(binding=4, std430) readonly restrict buffer instances_ssbo
{
	object_instance instances[];
};


layout(binding=5, std430) readonly restrict buffer nodes_ssbo
{
	object_node nodes[];
};




uniform scene
{
	mat4 view;
	mat4 view_inv;
};

float sphere(vec3 p, float r)
{
	return length(p) - r;
}


float cylinder(vec3 p, float height, float radius)
{
	vec2 d = abs(vec2(length(p.xz), p.y)) - vec2(radius, height);
	return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));			
}

float box(vec3 p, vec3 d){			
	vec3 q = abs(p) - d;				
	return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);	
}	

struct distance_result
{
	vec4 p;
	float min;
	vec3 color;
};


distance_result distance_object(vec4 p, float t_max, uint index)
{
	
	vec4 p_res = vec4(0.0);
	vec3 color = vec3(0.0);
	float min_t = t_max;
	
	if(index < spheres.length())
	{
		vec4 e = spheres[index].translation_inv*p;
		float t = sphere(e.xyz, spheres[index].radius);
		color = spheres[index].color;
		p_res = spheres[index].translation*p;
		min_t = t;
			
	}
	else if(index - spheres.length() < cylinders.length())
	{
		uint i = index - spheres.length();
		vec4 e = cylinders[i].translation_inv*p;
		float t = cylinder(e.xyz, cylinders[i].radius, cylinders[i].height);
	
		color = cylinders[i].color;
		p_res = cylinders[i].translation*p;
		min_t = t;
		
	}
	else if(index - spheres.length() - cylinders.length() < boxes.length())
	{
		uint i = index - spheres.length() - cylinders.length();
		vec4 e = boxes[i].translation_inv*p;
		float t = box(e.xyz, boxes[i].dimension);
	
		color = boxes[i].color;
		p_res = boxes[i].translation*p;
		min_t = t;
		
	} 
	
	distance_result result;
	result.p = p_res;
	result.min = min_t;
	result.color = color;
	return result;
	
}

distance_result distance(vec4 p, float t_max)
{
	
	distance_result result;
	result.min = t_max;
	
	distance_result result_object_none;
	result_object_none.min = t_max;
	
	
	for(int i = 0; i < instances.length(); i++)
	{
		uint levels = instances[i].levels;
		
		uint node_count_sum = 0;
		
		const uint node_total_count = 2;
		distance_result node_result[node_total_count];
		
		
		for(uint i = 0; i < levels; i++)
		{
			uint node_count = 1;
			for(uint j = 0; j < levels - i; j++)
			{
				node_count = node_count*2;	
			}
			node_count_sum += node_count;

			for(uint j = 0; j < node_count; j++)
			{
				uint index = node_total_count - node_count_sum + j;
				uint type = nodes[index].index_type;
				
				switch(type)
				{
					case OBJECT_OBJECT_UNION:
						{
							distance_result left = nodes[index].index_left == OBJECT_NONE ? result_object_none : distance_object(instances[i].translation_inv * p, t_max, nodes[index].index_left);
							distance_result right = nodes[index].index_right == OBJECT_NONE ? result_object_none : distance_object(instances[i].translation_inv * p, t_max, nodes[index].index_right);
							node_result[index] = left.min < right.min ? left : right;
						}
					break;	
					case OBJECT_NODE_UNION:
						{
							distance_result left = nodes[index].index_left == OBJECT_NONE ? result_object_none : distance_object(instances[i].translation_inv * p, t_max, nodes[index].index_left);
							node_result[index] = left.min < node_result[nodes[index].index_right].min ? left : node_result[nodes[index].index_right];
						}
					break;	
					case NODE_NODE_UNION:
						{
							node_result[index] = node_result[nodes[index].index_left].min < node_result[nodes[index].index_right].min ? node_result[nodes[index].index_left] : node_result[nodes[index].index_right];
						}
					break;	
				}
			}
		}
		
		
		
		uint type = instances[i].index_type;
		distance_result root_result;
		switch(type)
		{
			case OBJECT_OBJECT_UNION:
				{
					distance_result left = instances[i].index_left == OBJECT_NONE ? result_object_none : distance_object(instances[i].translation_inv * p, t_max, instances[i].index_left);
					distance_result right = instances[i].index_right == OBJECT_NONE ? result_object_none : distance_object(instances[i].translation_inv * p, t_max, instances[i].index_right);
					root_result = left.min < right.min ? left : right;
				}
			break;	
			case OBJECT_NODE_UNION:
				{
					distance_result left = instances[i].index_left == OBJECT_NONE ? result_object_none : distance_object(instances[i].translation_inv * p, t_max, instances[i].index_left);
					root_result = left.min < node_result[instances[i].index_right].min ? left : node_result[instances[i].index_right];
				}
			break;	
			case NODE_NODE_UNION:
				{
					root_result = node_result[instances[i].index_left].min < node_result[instances[i].index_right].min ? node_result[instances[i].index_left] : node_result[instances[i].index_right];
				}
			break;	
		}
		root_result.p = instances[i].translation * root_result.p;  
		result = root_result.min < result.min ?  root_result : result;
	} 
	
	
	return result;
	
}

void main()
{
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = 2.0*vec2(gl_GlobalInvocationID.xy)/gl_NumWorkGroups.xy-1.0;
	uv.x *= float(gl_NumWorkGroups.x)/float(gl_NumWorkGroups.y);
	vec3 ray = normalize(vec3(uv, 1.0));
	
	
	imageStore(normal, coord, vec4(0.0, 0.0, 0.0, 1.0));
	imageStore(color, coord, vec4(0.0, 0.0, 0.0, 1.0));
	imageStore(position, coord, vec4(0.0, 0.0, 0.0, 0.0));
			
	float t_max = 100.0;
	float t = 0.0; //imageLoad(buffer_t, coord/4).x;
	
	distance_result d_res; 
	for(int i = 0; i < 128; i++)
	{
		d_res = distance(view_inv*vec4(ray*t, 1.0), t_max);
		if(d_res.min < 0.01 || t > t_max )
		{
			break;
		}
		t = t + d_res.min;
	}
	
	if(t < t_max)
	{
		vec4 p = view*d_res.p;
		
		vec3 e = vec3(0.01, 0.0, 0.0);
		
		vec4 n_ray = view_inv*vec4(ray*t, 1.0);
		vec3 n = vec3(
			distance(vec4(n_ray+e.xyyy), t_max).min - distance(vec4(n_ray-e.xyyy), t_max).min,
			distance(vec4(n_ray+e.yxyy), t_max).min - distance(vec4(n_ray-e.yxyy), t_max).min,
			distance(vec4(n_ray+e.yyxy), t_max).min - distance(vec4(n_ray-e.yyxy), t_max).min
		);
		//n = (view_inv*vec4(n, 1.0)).xyz;	
		n = normalize(-n);	
		
		imageStore(color, coord, vec4(d_res.color, 1.0));
		imageStore(position, coord, vec4(p.xyz, 0.0));
		imageStore(normal, coord, vec4(n, 0.0));
	}
}
