struct light_instance
{
	vec3 position;
	float padding1;
	vec3 color;
	float padding2;
};


struct object_node
{
	uint object_index;
	uint padding[3];

	
	mat4 translation;
	mat4 translation_inv;
};

layout(location=2) out vec3 color;
layout(location=1) out vec3 position;
layout(location=0) out vec3 normal;


layout(binding=6) uniform scene_ubo
{
	mat4 view;
	mat4 view_inv;
	uint width;
	uint height;
	uint dummy[2];
};

layout(binding=3) uniform light_ubo
{
	light_instance 	lights[LIGHT_COUNT];
	uint		lights_count;
	uint		lights_dummy[3];
};


layout(binding=5) uniform nodes_ubo
{
	object_node 	nodes[OBJECT_NODE_COUNT];
	uint 		nodes_count; 
	uint		nodes_ubo_dummy[3];
};


in vec2 fragcoord;


float sphere(vec3 p)
{
	return length(p) - 1;
}


float cylinder(vec3 p)
{
	float radius = 1.0;
	float height = 1.0;
	vec2 d = abs(vec2(length(p.xz), p.y)) - vec2(radius, height);
	return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));			
}

float box(vec3 p){
	vec3 d = vec3(1.0);			
	vec3 q = abs(p) - d;				
	return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);	
}	

struct distance_result
{
	vec4 p;
	float min;
	vec3 color;
};


distance_result distance_object(vec4 p, float t_max, uint index)
{
	
	vec4 p_res = vec4(0.0);
	vec3 color = vec3(1.0);
	float min_t = t_max;
	
	if(index == 0)
	{
		float t = sphere(p.xyz);
		p_res = vec4(p.xyz, 1);
		min_t = t;
			
	}
	else if(index==1)
	{
		float t = cylinder(p.xyz);
		p_res = vec4(p.xyz, 1);
		min_t = t;
		
	}
	else if(index==2)
	{
		float t = box(p.xyz);
		p_res = vec4(p.xyz, 1);
		min_t = t;
	} 
	
	
	distance_result result;
	result.p = p_res;
	result.min = min_t;
	result.color = color;
	
	return result;
	
}

distance_result distance(vec4 p, float t_max)
{
	
	distance_result result;
	result.min = t_max;
	
	for(int i = 0; i < nodes_count; i++)
	{
		distance_result res = distance_object(nodes[i].translation_inv * p, t_max, nodes[i].object_index);
		res.p = nodes[i].translation * res.p;
		result = result.min < res.min ? result : res;
	} 
	

	return result;
	
}

//Soft shadow variation, see shadertoy. 
float shadow(vec4 ro, vec4 rd, float t_max)
{	
	float res = 1.0;
	float t = 0.0;	
	float ph = 1e10;
	float w = 0.1;
	distance_result d_res; 
	
	for(int i = 0; i < 32; i++)
	{
		d_res = distance(ro +rd*t, t_max);
		float h = d_res.min;
		
		float y = h*h/(2.0*ph);
            	float d = sqrt(h*h-y*y);
            	res = min( res, d/(w*max(0.0,t-y)) );
            	ph = h;
            	
            	t = t + d_res.min;
            	
		if(res < 0.0001 || t > t_max )
		{
			break;
		}
		
	}
	
	res = clamp( res, 0.0, 1.0 );
    	return res*res*(3.0-2.0*res);	
}

void main()
{
	vec2 coord = mix(vec2(0, 0), vec2(1, 1), gl_FragCoord.xy / vec2(width, height));
	vec2 uv = 2.0*coord.xy-1.0;
	uv.x *= float(width)/float(height);
	vec3 ray = normalize(vec3(uv, 1.0));
	
	
			
	float t_max = 100.0;
	float t = 0.1;
	
	distance_result d_res; 
	for(int i = 0; i < 64; i++)
	{
		d_res = distance(view_inv*vec4(ray*t, 1.0), t_max);
		if(d_res.min < 0.001 || t > t_max)
		{
			break;
		}
		t = t + d_res.min;
	}
	
	
	if(t < t_max)
	{
		vec4 p = d_res.p;
		
		vec3 e = vec3(0.01, 0.0, 0.0);
		
		vec4 n_ray = view_inv*vec4(ray*t, 1.0);
		vec3 n = vec3(
			distance(vec4(n_ray+e.xyyy), t_max).min - distance(vec4(n_ray-e.xyyy), t_max).min,
			distance(vec4(n_ray+e.yxyy), t_max).min - distance(vec4(n_ray-e.yxyy), t_max).min,
			distance(vec4(n_ray+e.yyxy), t_max).min - distance(vec4(n_ray-e.yyxy), t_max).min
		);

		n = normalize(n);	
		
		vec3 color_result = vec3(0.0);

		for(uint i = 0; i < lights_count; i++)
		{
			vec3 light_pos = lights[i].position;
			vec3 light_color = lights[i].color;

			vec3 light_dir = normalize(light_pos - p.xyz);
			float s = shadow(vec4(p.xyz, 1), vec4(light_dir, 0), t_max); 


			float diff = clamp(dot(n, light_dir), 0.0, 1.0) * s;
			vec3 diffuse = diff * light_color;
			
			
			
			color_result = color_result + (diffuse) * d_res.color;
		}


		color = color_result;
		position = vec3(0);
		
	}

	
	
	
}
