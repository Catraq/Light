
struct particle_emitter_normal
{
	vec3 position;
	float lifetime_expected;
	vec3 velocity_expected;
	float lifetime_variance;
	vec3 velocity_variance;
	uint emitter_offset;
	uint emitter_count;
	uint padding[3];
};

layout(binding=7) uniform normal
{
	particle_emitter_normal emitter_normal[EMITTER_NORMAL_COUNT];
	uint emitter_normal_count;
};


layout(binding=8) uniform emitter_index
{
	uint particle_emitter_index[EMITTER_COUNT];
};


uniform float deltatime;

layout(binding = 3) uniform sampler2D lifetime_in;
layout(binding = 2) uniform sampler2D acceleration_in;
layout(binding = 1) uniform sampler2D velocity_in;
layout(binding = 0) uniform sampler2D position_in;

layout(location= 3) out float lifetime_out;
layout(location=2) out vec3 acceleration_out;
layout(location=1) out vec3 velocity_out;
layout(location=0) out vec3 position_out;

in vec2 fragcoord;


float nrand(vec2 n)
{
	return fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);
}


void main()
{
	ivec2 coord = ivec2(gl_FragCoord.x, gl_FragCoord.y);
	uint emitter_index = particle_emitter_index[coord.y];
	
	vec3 a = texelFetch(acceleration_in, coord, 0).xyz;
	vec3 v = texelFetch(velocity_in, coord, 0).xyz;
	vec3 p = texelFetch(position_in, coord, 0).xyz;
	float l = texelFetch(lifetime_in, coord, 0).x;
	
	float lifetime = l - deltatime;

	if(lifetime < 0.0)
	{
		vec2 seed = coord.xy;
		vec3 velocity_exp = emitter_normal[emitter_index].velocity_expected;
		vec3 velocity_var = (2.0*vec3(
			nrand(seed + 0.21*seed),
			nrand(seed + 0.29*seed),
			nrand(seed + 0.31*seed)
		)-1.0)*emitter_normal[emitter_index].velocity_variance;
		
		acceleration_out = vec3(0); 
		velocity_out = velocity_exp + velocity_var; 
		position_out = emitter_normal[emitter_index].position;
		lifetime_out = emitter_normal[emitter_index].lifetime_expected + emitter_normal[emitter_index].lifetime_variance * nrand(seed + 0.101*seed + 0.31*seed);
	}
	else
	{
		acceleration_out = a;
		velocity_out = v + a * deltatime;
		position_out = p + v * deltatime + a * deltatime * deltatime/2; 
		lifetime_out = lifetime;
	}
	
	
}
